[gd_scene load_steps=9 format=2]

[sub_resource type="CapsuleShape" id=2]
resource_name = "IcosphereCollision"
radius = 1.07115
height = 3.51274

[sub_resource type="Shader" id=3]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.8000000715255737, 0.1585254818201065, 0.0,
		1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(0.5);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )

[sub_resource type="Shader" id=5]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.006905503571033478, 0.0, 0.8000000715255737,
		1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(0.5);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )

[sub_resource type="Shader" id=7]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.06997813284397125, 0.0, 0.020758330821990967,
		1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(0.5);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )

[sub_resource type="ArrayMesh" id=9]
resource_name = "Icosphere"
surfaces/0 = {
"aabb": AABB( -0.951058, -1, -1, 1.90212, 2, 2 ),
"array_data": PoolByteArray( 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 0, 129, 0, 0, 136, 0, 39, 129, 139, 58, 0, 60, 240, 195, 217, 62, 118, 196, 89, 191, 177, 54, 158, 62, 54, 148, 39, 0, 149, 224, 59, 129, 46, 58, 94, 59, 222, 90, 38, 190, 118, 196, 89, 191, 88, 255, 255, 62, 236, 148, 63, 0, 135, 32, 15, 129, 232, 58, 94, 59, 79, 62, 57, 63, 5, 250, 228, 190, 234, 149, 6, 63, 91, 200, 66, 0, 182, 0, 102, 129, 209, 57, 189, 58, 240, 195, 217, 62, 118, 196, 89, 191, 177, 54, 158, 62, 54, 148, 39, 0, 234, 32, 120, 129, 116, 57, 94, 59, 17, 196, 89, 63, 162, 150, 6, 191, 0, 0, 0, 0, 108, 190, 0, 0, 0, 0, 127, 129, 23, 57, 189, 58, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 0, 129, 0, 0, 182, 0, 154, 129, 209, 45, 0, 60, 222, 90, 38, 190, 118, 196, 89, 191, 88, 255, 255, 62, 236, 148, 63, 0, 167, 224, 172, 129, 209, 41, 94, 59, 62, 150, 6, 191, 84, 196, 89, 191, 0, 0, 0, 0, 190, 148, 0, 0, 204, 32, 145, 129, 93, 48, 94, 59, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 0, 129, 0, 0, 74, 0, 154, 129, 93, 52, 0, 60, 62, 150, 6, 191, 84, 196, 89, 191, 0, 0, 0, 0, 190, 148, 0, 0, 52, 224, 145, 129, 69, 51, 94, 59, 222, 90, 38, 190, 118, 196, 89, 191, 88, 255, 255, 190, 236, 148, 193, 0, 89, 32, 172, 129, 23, 53, 94, 59, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 0, 129, 0, 0, 120, 0, 39, 129, 69, 55, 0, 60, 222, 90, 38, 190, 118, 196, 89, 191, 88, 255, 255, 190, 236, 148, 193, 0, 121, 224, 15, 129, 139, 54, 94, 59, 240, 195, 217, 62, 118, 196, 89, 191, 177, 54, 158, 190, 54, 148, 217, 0, 107, 32, 59, 129, 0, 56, 94, 59, 137, 120, 115, 63, 0, 0, 0, 0, 244, 54, 158, 62, 120, 0, 39, 0, 217, 5, 120, 129, 116, 57, 28, 58, 186, 130, 141, 190, 5, 250, 228, 190, 34, 196, 89, 63, 221, 200, 108, 0, 135, 23, 229, 129, 69, 59, 189, 58, 196, 150, 134, 62, 196, 150, 6, 191, 105, 27, 79, 63, 33, 190, 102, 0, 136, 0, 39, 129, 139, 58, 189, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 127, 0, 130, 5, 0, 129, 232, 58, 28, 58, 26, 249, 100, 191, 127, 249, 228, 190, 0, 0, 0, 0, 143, 200, 0, 0, 0, 0, 129, 129, 209, 49, 189, 58, 40, 45, 48, 191, 162, 150, 6, 191, 155, 255, 255, 62, 169, 190, 63, 0, 182, 0, 154, 129, 209, 45, 189, 58, 137, 120, 115, 191, 0, 0, 0, 0, 244, 54, 158, 62, 136, 0, 39, 0, 217, 5, 136, 129, 93, 48, 28, 58, 186, 130, 141, 190, 5, 250, 228, 190, 34, 196, 89, 191, 221, 200, 148, 0, 120, 0, 217, 129, 209, 53, 189, 58, 40, 45, 48, 191, 162, 150, 6, 191, 155, 255, 255, 190, 169, 190, 193, 0, 74, 0, 154, 129, 93, 52, 189, 58, 37, 121, 22, 191, 0, 0, 0, 0, 189, 27, 79, 191, 182, 0, 154, 0, 102, 5, 182, 129, 23, 53, 28, 58, 79, 62, 57, 63, 5, 250, 228, 190, 234, 149, 6, 191, 91, 200, 190, 0, 74, 0, 102, 129, 93, 56, 189, 58, 196, 150, 134, 62, 196, 150, 6, 191, 105, 27, 79, 191, 33, 190, 154, 0, 120, 0, 39, 129, 69, 55, 189, 58, 37, 121, 22, 63, 0, 0, 0, 0, 189, 27, 79, 191, 74, 0, 154, 0, 102, 5, 74, 129, 0, 56, 28, 58, 37, 121, 22, 63, 0, 0, 0, 0, 189, 27, 79, 63, 74, 0, 102, 0, 154, 251, 74, 129, 46, 58, 28, 58, 37, 121, 22, 191, 0, 0, 0, 0, 189, 27, 79, 63, 182, 0, 102, 0, 154, 251, 182, 129, 162, 59, 28, 58, 137, 120, 115, 191, 0, 0, 0, 0, 244, 54, 158, 190, 136, 0, 217, 0, 39, 251, 136, 129, 69, 51, 28, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 129, 0, 126, 251, 0, 129, 139, 54, 28, 58, 137, 120, 115, 63, 0, 0, 0, 0, 244, 54, 158, 190, 120, 0, 217, 0, 39, 251, 120, 129, 186, 56, 28, 58, 186, 130, 141, 62, 5, 250, 228, 62, 34, 196, 89, 63, 35, 56, 108, 0, 136, 0, 39, 129, 139, 58, 123, 57, 40, 45, 48, 63, 162, 150, 6, 63, 155, 255, 255, 62, 87, 66, 63, 0, 182, 0, 102, 129, 209, 57, 123, 57, 222, 90, 38, 62, 118, 196, 89, 63, 88, 255, 255, 62, 20, 108, 63, 0, 167, 224, 84, 129, 46, 58, 217, 56, 79, 62, 57, 191, 5, 250, 228, 62, 234, 149, 6, 63, 165, 56, 66, 0, 171, 221, 169, 129, 0, 60, 123, 57, 196, 150, 134, 190, 196, 150, 6, 63, 105, 27, 79, 63, 223, 66, 102, 0, 136, 0, 217, 129, 69, 59, 123, 57, 240, 195, 217, 190, 118, 196, 89, 63, 177, 54, 158, 62, 202, 108, 39, 0, 149, 224, 197, 129, 162, 59, 217, 56, 79, 62, 57, 191, 5, 250, 228, 62, 234, 149, 6, 191, 165, 56, 190, 0, 74, 0, 154, 129, 93, 52, 123, 57, 17, 196, 89, 191, 162, 150, 6, 63, 0, 0, 0, 0, 148, 66, 0, 0, 0, 0, 129, 129, 209, 49, 123, 57, 240, 195, 217, 190, 118, 196, 89, 63, 177, 54, 158, 190, 202, 108, 217, 0, 22, 224, 136, 129, 69, 51, 217, 56, 186, 130, 141, 62, 5, 250, 228, 62, 34, 196, 89, 191, 35, 56, 148, 0, 120, 0, 39, 129, 69, 55, 123, 57, 196, 150, 134, 190, 196, 150, 6, 63, 105, 27, 79, 191, 223, 66, 154, 0, 120, 0, 217, 129, 209, 53, 123, 57, 222, 90, 38, 62, 118, 196, 89, 63, 88, 255, 255, 190, 20, 108, 193, 0, 121, 224, 241, 129, 139, 54, 217, 56, 26, 249, 100, 63, 127, 249, 228, 62, 0, 0, 0, 0, 113, 56, 0, 0, 0, 0, 127, 129, 23, 57, 123, 57, 40, 45, 48, 63, 162, 150, 6, 63, 155, 255, 255, 190, 87, 66, 193, 0, 74, 0, 102, 129, 93, 56, 123, 57, 62, 150, 6, 63, 84, 196, 89, 63, 0, 0, 0, 0, 66, 108, 0, 0, 52, 224, 111, 129, 186, 56, 217, 56, 222, 90, 38, 62, 118, 196, 89, 63, 88, 255, 255, 190, 20, 108, 193, 0, 89, 32, 84, 129, 0, 56, 217, 56, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 127, 0, 0, 74, 0, 102, 129, 93, 56, 56, 56, 240, 195, 217, 190, 118, 196, 89, 63, 177, 54, 158, 190, 202, 108, 217, 0, 107, 32, 197, 129, 23, 53, 217, 56, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 127, 0, 0, 120, 0, 217, 129, 209, 53, 56, 56, 240, 195, 217, 190, 118, 196, 89, 63, 177, 54, 158, 62, 202, 108, 39, 0, 234, 32, 136, 129, 93, 48, 217, 56, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 129, 129, 209, 49, 56, 56, 79, 62, 57, 191, 5, 250, 228, 62, 234, 149, 6, 63, 165, 56, 66, 0, 193, 23, 149, 129, 209, 45, 123, 57, 222, 90, 38, 62, 118, 196, 89, 63, 88, 255, 255, 62, 20, 108, 63, 0, 135, 32, 241, 129, 232, 58, 217, 56, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 127, 0, 0, 136, 0, 217, 129, 69, 59, 56, 56, 62, 150, 6, 63, 84, 196, 89, 63, 0, 0, 0, 0, 66, 108, 0, 0, 204, 32, 111, 129, 116, 57, 217, 56, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 127, 0, 0, 182, 0, 102, 129, 209, 57, 56, 56, 37, 121, 22, 191, 0, 0, 0, 0, 189, 27, 79, 63, 182, 0, 102, 0, 154, 251, 182, 129, 209, 41, 28, 58, 186, 130, 141, 190, 5, 250, 228, 190, 34, 196, 89, 63, 221, 200, 108, 0, 147, 221, 202, 129, 0, 0, 189, 58, 240, 195, 217, 62, 118, 196, 89, 191, 177, 54, 158, 190, 54, 148, 217, 0, 22, 224, 120, 129, 186, 56, 94, 59, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0, 127, 129, 23, 57, 0, 60 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 3, 0, 5, 0, 4, 0, 6, 0, 8, 0, 7, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 3, 0, 15, 0, 5, 0, 16, 0, 18, 0, 17, 0, 19, 0, 21, 0, 20, 0, 22, 0, 24, 0, 23, 0, 25, 0, 27, 0, 26, 0, 3, 0, 28, 0, 15, 0, 16, 0, 29, 0, 18, 0, 19, 0, 30, 0, 21, 0, 22, 0, 31, 0, 24, 0, 25, 0, 32, 0, 27, 0, 33, 0, 35, 0, 34, 0, 36, 0, 38, 0, 37, 0, 39, 0, 41, 0, 40, 0, 42, 0, 44, 0, 43, 0, 45, 0, 47, 0, 46, 0, 47, 0, 49, 0, 48, 0, 47, 0, 48, 0, 46, 0, 46, 0, 48, 0, 42, 0, 44, 0, 51, 0, 50, 0, 44, 0, 50, 0, 43, 0, 43, 0, 50, 0, 39, 0, 41, 0, 53, 0, 52, 0, 41, 0, 52, 0, 40, 0, 40, 0, 52, 0, 54, 0, 38, 0, 56, 0, 55, 0, 38, 0, 55, 0, 37, 0, 37, 0, 55, 0, 33, 0, 35, 0, 58, 0, 57, 0, 35, 0, 57, 0, 34, 0, 34, 0, 57, 0, 45, 0, 32, 0, 45, 0, 46, 0, 32, 0, 46, 0, 27, 0, 27, 0, 46, 0, 42, 0, 31, 0, 42, 0, 43, 0, 31, 0, 43, 0, 24, 0, 24, 0, 43, 0, 39, 0, 30, 0, 39, 0, 40, 0, 30, 0, 40, 0, 21, 0, 21, 0, 40, 0, 54, 0, 29, 0, 36, 0, 37, 0, 29, 0, 37, 0, 18, 0, 18, 0, 37, 0, 33, 0, 28, 0, 33, 0, 34, 0, 28, 0, 34, 0, 15, 0, 15, 0, 34, 0, 45, 0, 27, 0, 42, 0, 31, 0, 27, 0, 31, 0, 26, 0, 26, 0, 31, 0, 22, 0, 24, 0, 39, 0, 30, 0, 24, 0, 30, 0, 23, 0, 23, 0, 30, 0, 19, 0, 21, 0, 54, 0, 59, 0, 21, 0, 59, 0, 20, 0, 20, 0, 59, 0, 60, 0, 18, 0, 33, 0, 28, 0, 18, 0, 28, 0, 17, 0, 17, 0, 28, 0, 3, 0, 15, 0, 45, 0, 32, 0, 15, 0, 32, 0, 5, 0, 5, 0, 32, 0, 25, 0, 14, 0, 25, 0, 26, 0, 14, 0, 26, 0, 13, 0, 13, 0, 26, 0, 22, 0, 11, 0, 22, 0, 23, 0, 11, 0, 23, 0, 10, 0, 10, 0, 23, 0, 19, 0, 8, 0, 19, 0, 20, 0, 8, 0, 20, 0, 7, 0, 7, 0, 20, 0, 60, 0, 5, 0, 25, 0, 61, 0, 5, 0, 61, 0, 4, 0, 4, 0, 61, 0, 62, 0, 2, 0, 16, 0, 17, 0, 2, 0, 17, 0, 1, 0, 1, 0, 17, 0, 3, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 240,
"material": SubResource( 4 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 63
}
surfaces/1 = {
"aabb": AABB( -0.882668, -4.08939, -0.882668, 1.76534, 3.49174, 1.76535 ),
"array_data": PoolByteArray( 136, 246, 97, 191, 63, 0, 25, 191, 136, 246, 97, 63, 129, 0, 0, 0, 0, 127, 0, 127, 0, 57, 0, 60, 136, 246, 97, 191, 72, 220, 130, 192, 136, 246, 97, 191, 129, 0, 0, 0, 0, 127, 0, 127, 0, 54, 0, 58, 136, 246, 97, 191, 72, 220, 130, 192, 136, 246, 97, 63, 129, 0, 0, 0, 0, 127, 0, 127, 0, 54, 0, 60, 136, 246, 97, 191, 63, 0, 25, 191, 136, 246, 97, 191, 0, 0, 129, 0, 0, 127, 0, 127, 0, 57, 0, 58, 136, 246, 97, 63, 72, 220, 130, 192, 136, 246, 97, 191, 0, 0, 129, 0, 0, 127, 0, 127, 0, 54, 0, 56, 136, 246, 97, 191, 72, 220, 130, 192, 136, 246, 97, 191, 0, 0, 129, 0, 0, 127, 0, 127, 0, 54, 0, 58, 136, 246, 97, 63, 63, 0, 25, 191, 136, 246, 97, 191, 127, 0, 0, 0, 0, 127, 0, 127, 0, 57, 0, 56, 136, 246, 97, 63, 72, 220, 130, 192, 136, 246, 97, 63, 127, 0, 0, 0, 0, 127, 0, 127, 0, 54, 0, 52, 136, 246, 97, 63, 72, 220, 130, 192, 136, 246, 97, 191, 127, 0, 0, 0, 0, 127, 0, 127, 0, 54, 0, 56, 136, 246, 97, 63, 63, 0, 25, 191, 136, 246, 97, 63, 0, 0, 127, 0, 0, 127, 0, 127, 0, 57, 0, 52, 136, 246, 97, 191, 72, 220, 130, 192, 136, 246, 97, 63, 0, 0, 127, 0, 0, 127, 0, 127, 0, 54, 0, 0, 136, 246, 97, 63, 72, 220, 130, 192, 136, 246, 97, 63, 0, 0, 127, 0, 0, 127, 0, 127, 0, 54, 0, 52, 136, 246, 97, 63, 72, 220, 130, 192, 136, 246, 97, 191, 0, 129, 0, 0, 127, 0, 0, 127, 0, 54, 0, 56, 136, 246, 97, 191, 72, 220, 130, 192, 136, 246, 97, 63, 0, 129, 0, 0, 127, 0, 0, 127, 0, 48, 0, 52, 136, 246, 97, 191, 72, 220, 130, 192, 136, 246, 97, 191, 0, 129, 0, 0, 127, 0, 0, 127, 0, 48, 0, 56, 136, 246, 97, 191, 63, 0, 25, 191, 136, 246, 97, 191, 0, 127, 0, 0, 129, 0, 0, 127, 0, 59, 0, 56, 136, 246, 97, 63, 63, 0, 25, 191, 136, 246, 97, 63, 0, 127, 0, 0, 129, 0, 0, 127, 0, 57, 0, 52, 136, 246, 97, 63, 63, 0, 25, 191, 136, 246, 97, 191, 0, 127, 0, 0, 129, 0, 0, 127, 0, 57, 0, 56, 136, 246, 97, 191, 63, 0, 25, 191, 136, 246, 97, 191, 129, 0, 0, 0, 0, 127, 0, 127, 0, 57, 0, 58, 136, 246, 97, 63, 63, 0, 25, 191, 136, 246, 97, 191, 0, 0, 129, 0, 0, 127, 0, 127, 0, 57, 0, 56, 136, 246, 97, 63, 63, 0, 25, 191, 136, 246, 97, 63, 127, 0, 0, 0, 0, 127, 0, 127, 0, 57, 0, 52, 136, 246, 97, 191, 63, 0, 25, 191, 136, 246, 97, 63, 0, 0, 127, 0, 0, 127, 0, 127, 0, 57, 0, 0, 136, 246, 97, 63, 72, 220, 130, 192, 136, 246, 97, 63, 0, 129, 0, 0, 127, 0, 0, 127, 0, 54, 0, 52, 136, 246, 97, 191, 63, 0, 25, 191, 136, 246, 97, 63, 0, 127, 0, 0, 129, 0, 0, 127, 0, 59, 0, 52 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 3, 0, 5, 0, 4, 0, 6, 0, 8, 0, 7, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 15, 0, 17, 0, 16, 0, 0, 0, 1, 0, 18, 0, 3, 0, 4, 0, 19, 0, 6, 0, 7, 0, 20, 0, 9, 0, 10, 0, 21, 0, 12, 0, 13, 0, 22, 0, 15, 0, 16, 0, 23, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 36,
"material": SubResource( 6 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 24
}
surfaces/2 = {
"aabb": AABB( -0.951058, -4.6945, -1, 1.90212, 0.84793, 2 ),
"array_data": PoolByteArray( 0, 0, 0, 0, 88, 57, 150, 192, 0, 0, 0, 0, 0, 130, 0, 0, 136, 0, 39, 129, 139, 58, 0, 60, 240, 195, 217, 62, 160, 50, 148, 192, 177, 54, 158, 62, 28, 135, 20, 0, 142, 239, 52, 129, 46, 58, 94, 59, 222, 90, 38, 190, 160, 50, 148, 192, 88, 255, 255, 62, 246, 135, 33, 0, 133, 17, 24, 129, 232, 58, 94, 59, 79, 62, 57, 63, 120, 185, 142, 192, 234, 149, 6, 63, 75, 171, 55, 0, 182, 0, 102, 129, 209, 57, 189, 58, 240, 195, 217, 62, 160, 50, 148, 192, 177, 54, 158, 62, 28, 135, 20, 0, 242, 17, 124, 129, 116, 57, 94, 59, 17, 196, 89, 63, 46, 202, 143, 192, 0, 0, 0, 0, 84, 161, 0, 0, 0, 0, 127, 129, 23, 57, 189, 58, 0, 0, 0, 0, 88, 57, 150, 192, 0, 0, 0, 0, 0, 130, 0, 0, 182, 0, 154, 129, 209, 45, 0, 60, 222, 90, 38, 190, 160, 50, 148, 192, 88, 255, 255, 62, 246, 135, 33, 0, 171, 239, 164, 129, 209, 41, 94, 59, 62, 150, 6, 191, 160, 50, 148, 192, 0, 0, 0, 0, 221, 135, 0, 0, 195, 17, 147, 129, 93, 48, 94, 59, 0, 0, 0, 0, 88, 57, 150, 192, 0, 0, 0, 0, 0, 130, 0, 0, 74, 0, 154, 129, 93, 52, 0, 60, 62, 150, 6, 191, 160, 50, 148, 192, 0, 0, 0, 0, 221, 135, 0, 0, 61, 239, 147, 129, 69, 51, 94, 59, 222, 90, 38, 190, 160, 50, 148, 192, 88, 255, 255, 190, 246, 135, 223, 0, 85, 17, 164, 129, 23, 53, 94, 59, 0, 0, 0, 0, 88, 57, 150, 192, 0, 0, 0, 0, 0, 130, 0, 0, 120, 0, 39, 129, 69, 55, 0, 60, 222, 90, 38, 190, 160, 50, 148, 192, 88, 255, 255, 190, 246, 135, 223, 0, 123, 239, 24, 129, 139, 54, 94, 59, 240, 195, 217, 62, 160, 50, 148, 192, 177, 54, 158, 190, 28, 135, 236, 0, 114, 17, 52, 129, 0, 56, 94, 59, 137, 120, 115, 63, 68, 168, 136, 192, 244, 54, 158, 62, 120, 0, 39, 0, 217, 4, 120, 129, 116, 57, 28, 58, 186, 130, 141, 190, 120, 185, 142, 192, 34, 196, 89, 63, 228, 171, 89, 0, 133, 14, 231, 129, 69, 59, 189, 58, 196, 150, 134, 62, 46, 202, 143, 192, 105, 27, 79, 63, 26, 161, 80, 0, 136, 0, 39, 129, 139, 58, 189, 58, 0, 0, 0, 0, 68, 168, 136, 192, 0, 0, 128, 63, 0, 0, 127, 0, 130, 4, 0, 129, 232, 58, 28, 58, 26, 249, 100, 191, 120, 185, 142, 192, 0, 0, 0, 0, 163, 171, 0, 0, 0, 0, 129, 129, 209, 49, 189, 58, 40, 45, 48, 191, 46, 202, 143, 192, 155, 255, 255, 62, 188, 161, 49, 0, 182, 0, 154, 129, 209, 45, 189, 58, 137, 120, 115, 191, 68, 168, 136, 192, 244, 54, 158, 62, 136, 0, 39, 0, 217, 4, 136, 129, 93, 48, 28, 58, 186, 130, 141, 190, 120, 185, 142, 192, 34, 196, 89, 191, 228, 171, 167, 0, 120, 0, 217, 129, 209, 53, 189, 58, 40, 45, 48, 191, 46, 202, 143, 192, 155, 255, 255, 190, 188, 161, 207, 0, 74, 0, 154, 129, 93, 52, 189, 58, 37, 121, 22, 191, 68, 168, 136, 192, 189, 27, 79, 191, 182, 0, 154, 0, 102, 4, 182, 129, 23, 53, 28, 58, 79, 62, 57, 63, 120, 185, 142, 192, 234, 149, 6, 191, 75, 171, 201, 0, 74, 0, 102, 129, 93, 56, 189, 58, 196, 150, 134, 62, 46, 202, 143, 192, 105, 27, 79, 191, 26, 161, 176, 0, 120, 0, 39, 129, 69, 55, 189, 58, 37, 121, 22, 63, 68, 168, 136, 192, 189, 27, 79, 191, 74, 0, 154, 0, 102, 4, 74, 129, 0, 56, 28, 58, 37, 121, 22, 63, 68, 168, 136, 192, 189, 27, 79, 63, 74, 0, 102, 0, 154, 252, 74, 129, 46, 58, 28, 58, 37, 121, 22, 191, 68, 168, 136, 192, 189, 27, 79, 63, 182, 0, 102, 0, 154, 252, 182, 129, 162, 59, 28, 58, 137, 120, 115, 191, 68, 168, 136, 192, 244, 54, 158, 190, 136, 0, 217, 0, 39, 252, 136, 129, 69, 51, 28, 58, 0, 0, 0, 0, 68, 168, 136, 192, 0, 0, 128, 191, 0, 0, 129, 0, 126, 252, 0, 129, 139, 54, 28, 58, 137, 120, 115, 63, 68, 168, 136, 192, 244, 54, 158, 190, 120, 0, 217, 0, 39, 252, 120, 129, 186, 56, 28, 58, 186, 130, 141, 62, 251, 150, 130, 192, 34, 196, 89, 63, 28, 85, 89, 0, 136, 0, 39, 129, 139, 58, 123, 57, 40, 45, 48, 63, 68, 134, 129, 192, 155, 255, 255, 62, 68, 95, 49, 0, 182, 0, 102, 129, 209, 57, 123, 57, 222, 90, 38, 62, 163, 59, 122, 192, 88, 255, 255, 62, 10, 121, 33, 0, 171, 239, 92, 129, 46, 58, 217, 56, 79, 62, 57, 191, 251, 150, 130, 192, 234, 149, 6, 63, 181, 85, 55, 0, 164, 227, 175, 129, 0, 60, 123, 57, 196, 150, 134, 190, 68, 134, 129, 192, 105, 27, 79, 63, 230, 95, 80, 0, 136, 0, 217, 129, 69, 59, 123, 57, 240, 195, 217, 190, 163, 59, 122, 192, 177, 54, 158, 62, 228, 121, 20, 0, 142, 239, 204, 129, 162, 59, 217, 56, 79, 62, 57, 191, 251, 150, 130, 192, 234, 149, 6, 191, 181, 85, 201, 0, 74, 0, 154, 129, 93, 52, 123, 57, 17, 196, 89, 191, 68, 134, 129, 192, 0, 0, 0, 0, 172, 95, 0, 0, 0, 0, 129, 129, 209, 49, 123, 57, 240, 195, 217, 190, 163, 59, 122, 192, 177, 54, 158, 190, 228, 121, 236, 0, 14, 239, 132, 129, 69, 51, 217, 56, 186, 130, 141, 62, 251, 150, 130, 192, 34, 196, 89, 191, 28, 85, 167, 0, 120, 0, 39, 129, 69, 55, 123, 57, 196, 150, 134, 190, 68, 134, 129, 192, 105, 27, 79, 191, 230, 95, 176, 0, 120, 0, 217, 129, 209, 53, 123, 57, 222, 90, 38, 62, 163, 59, 122, 192, 88, 255, 255, 190, 10, 121, 223, 0, 123, 239, 232, 129, 139, 54, 217, 56, 26, 249, 100, 63, 251, 150, 130, 192, 0, 0, 0, 0, 93, 85, 0, 0, 0, 0, 127, 129, 23, 57, 123, 57, 40, 45, 48, 63, 68, 134, 129, 192, 155, 255, 255, 190, 68, 95, 207, 0, 74, 0, 102, 129, 93, 56, 123, 57, 62, 150, 6, 63, 163, 59, 122, 192, 0, 0, 0, 0, 35, 121, 0, 0, 61, 239, 109, 129, 186, 56, 217, 56, 222, 90, 38, 62, 163, 59, 122, 192, 88, 255, 255, 190, 10, 121, 223, 0, 85, 17, 92, 129, 0, 56, 217, 56, 0, 0, 0, 0, 52, 46, 118, 192, 0, 0, 0, 0, 0, 126, 0, 0, 74, 0, 102, 129, 93, 56, 56, 56, 240, 195, 217, 190, 163, 59, 122, 192, 177, 54, 158, 190, 228, 121, 236, 0, 114, 17, 204, 129, 23, 53, 217, 56, 0, 0, 0, 0, 52, 46, 118, 192, 0, 0, 0, 0, 0, 126, 0, 0, 120, 0, 217, 129, 209, 53, 56, 56, 240, 195, 217, 190, 163, 59, 122, 192, 177, 54, 158, 62, 228, 121, 20, 0, 242, 17, 132, 129, 93, 48, 217, 56, 0, 0, 0, 0, 52, 46, 118, 192, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 129, 129, 209, 49, 56, 56, 79, 62, 57, 191, 251, 150, 130, 192, 234, 149, 6, 63, 181, 85, 55, 0, 194, 14, 147, 129, 209, 45, 123, 57, 222, 90, 38, 62, 163, 59, 122, 192, 88, 255, 255, 62, 10, 121, 33, 0, 133, 17, 232, 129, 232, 58, 217, 56, 0, 0, 0, 0, 52, 46, 118, 192, 0, 0, 0, 0, 0, 126, 0, 0, 136, 0, 217, 129, 69, 59, 56, 56, 62, 150, 6, 63, 163, 59, 122, 192, 0, 0, 0, 0, 35, 121, 0, 0, 195, 17, 109, 129, 116, 57, 217, 56, 0, 0, 0, 0, 52, 46, 118, 192, 0, 0, 0, 0, 0, 126, 0, 0, 182, 0, 102, 129, 209, 57, 56, 56, 37, 121, 22, 191, 68, 168, 136, 192, 189, 27, 79, 63, 182, 0, 102, 0, 154, 252, 182, 129, 209, 41, 28, 58, 186, 130, 141, 190, 120, 185, 142, 192, 34, 196, 89, 63, 228, 171, 89, 0, 150, 227, 194, 129, 0, 0, 189, 58, 240, 195, 217, 62, 160, 50, 148, 192, 177, 54, 158, 190, 28, 135, 236, 0, 14, 239, 124, 129, 186, 56, 94, 59, 0, 0, 0, 0, 88, 57, 150, 192, 0, 0, 0, 0, 0, 130, 0, 0, 0, 0, 127, 129, 23, 57, 0, 60 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 3, 0, 5, 0, 4, 0, 6, 0, 8, 0, 7, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 3, 0, 15, 0, 5, 0, 16, 0, 18, 0, 17, 0, 19, 0, 21, 0, 20, 0, 22, 0, 24, 0, 23, 0, 25, 0, 27, 0, 26, 0, 3, 0, 28, 0, 15, 0, 16, 0, 29, 0, 18, 0, 19, 0, 30, 0, 21, 0, 22, 0, 31, 0, 24, 0, 25, 0, 32, 0, 27, 0, 33, 0, 35, 0, 34, 0, 36, 0, 38, 0, 37, 0, 39, 0, 41, 0, 40, 0, 42, 0, 44, 0, 43, 0, 45, 0, 47, 0, 46, 0, 47, 0, 49, 0, 48, 0, 47, 0, 48, 0, 46, 0, 46, 0, 48, 0, 42, 0, 44, 0, 51, 0, 50, 0, 44, 0, 50, 0, 43, 0, 43, 0, 50, 0, 39, 0, 41, 0, 53, 0, 52, 0, 41, 0, 52, 0, 40, 0, 40, 0, 52, 0, 54, 0, 38, 0, 56, 0, 55, 0, 38, 0, 55, 0, 37, 0, 37, 0, 55, 0, 33, 0, 35, 0, 58, 0, 57, 0, 35, 0, 57, 0, 34, 0, 34, 0, 57, 0, 45, 0, 32, 0, 45, 0, 46, 0, 32, 0, 46, 0, 27, 0, 27, 0, 46, 0, 42, 0, 31, 0, 42, 0, 43, 0, 31, 0, 43, 0, 24, 0, 24, 0, 43, 0, 39, 0, 30, 0, 39, 0, 40, 0, 30, 0, 40, 0, 21, 0, 21, 0, 40, 0, 54, 0, 29, 0, 36, 0, 37, 0, 29, 0, 37, 0, 18, 0, 18, 0, 37, 0, 33, 0, 28, 0, 33, 0, 34, 0, 28, 0, 34, 0, 15, 0, 15, 0, 34, 0, 45, 0, 27, 0, 42, 0, 31, 0, 27, 0, 31, 0, 26, 0, 26, 0, 31, 0, 22, 0, 24, 0, 39, 0, 30, 0, 24, 0, 30, 0, 23, 0, 23, 0, 30, 0, 19, 0, 21, 0, 54, 0, 59, 0, 21, 0, 59, 0, 20, 0, 20, 0, 59, 0, 60, 0, 18, 0, 33, 0, 28, 0, 18, 0, 28, 0, 17, 0, 17, 0, 28, 0, 3, 0, 15, 0, 45, 0, 32, 0, 15, 0, 32, 0, 5, 0, 5, 0, 32, 0, 25, 0, 14, 0, 25, 0, 26, 0, 14, 0, 26, 0, 13, 0, 13, 0, 26, 0, 22, 0, 11, 0, 22, 0, 23, 0, 11, 0, 23, 0, 10, 0, 10, 0, 23, 0, 19, 0, 8, 0, 19, 0, 20, 0, 8, 0, 20, 0, 7, 0, 7, 0, 20, 0, 60, 0, 5, 0, 25, 0, 61, 0, 5, 0, 61, 0, 4, 0, 4, 0, 61, 0, 62, 0, 2, 0, 16, 0, 17, 0, 2, 0, 17, 0, 1, 0, 1, 0, 17, 0, 3, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 240,
"material": SubResource( 8 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 63
}

[node name="dork" type="RigidBody"]

[node name="IcosphereCollision" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 2.50019, 0 )
shape = SubResource( 2 )

[node name="Icosphere" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4.34274, 0 )
mesh = SubResource( 9 )
material/0 = null
material/1 = null
material/2 = null
