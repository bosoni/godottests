[gd_scene load_steps=7 format=2]

[sub_resource type="Shader" id=1]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.0, 0.20791637897491455, 0.002739202929660678,
		1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(0.5);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )

[sub_resource type="Shader" id=3]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.10247376561164856, 0.03663647174835205,
		0.014009498991072178, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(0.5);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )

[sub_resource type="ArrayMesh" id=5]
resource_name = "Cone"
surfaces/0 = {
"aabb": AABB( -0.866025, -1, -1, 1.73205, 2, 2 ),
"array_data": PoolByteArray( 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 128, 191, 58, 50, 156, 0, 83, 160, 0, 127, 0, 52, 20, 56, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 58, 50, 156, 0, 83, 160, 0, 127, 0, 52, 0, 58, 208, 179, 93, 63, 0, 0, 128, 191, 0, 0, 0, 191, 58, 50, 156, 0, 83, 160, 0, 127, 83, 55, 10, 57, 208, 179, 93, 63, 0, 0, 128, 191, 0, 0, 0, 191, 116, 50, 0, 0, 50, 140, 0, 127, 83, 55, 10, 57, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 116, 50, 0, 0, 50, 140, 0, 127, 0, 52, 0, 58, 208, 179, 93, 63, 0, 0, 128, 191, 0, 0, 0, 63, 116, 50, 0, 0, 50, 140, 0, 127, 83, 55, 245, 58, 208, 179, 93, 63, 0, 0, 128, 191, 0, 0, 0, 63, 58, 50, 100, 0, 83, 160, 0, 127, 83, 55, 245, 58, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 58, 50, 100, 0, 83, 160, 0, 127, 0, 52, 0, 58, 49, 189, 187, 179, 0, 0, 128, 191, 0, 0, 128, 63, 58, 50, 100, 0, 83, 160, 0, 127, 0, 52, 235, 59, 49, 189, 187, 179, 0, 0, 128, 191, 0, 0, 128, 63, 198, 50, 100, 0, 83, 96, 0, 127, 0, 52, 235, 59, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 198, 50, 100, 0, 83, 96, 0, 127, 0, 52, 0, 58, 208, 179, 93, 191, 0, 0, 128, 191, 0, 0, 0, 63, 198, 50, 100, 0, 83, 96, 0, 127, 101, 41, 245, 58, 208, 179, 93, 191, 0, 0, 128, 191, 0, 0, 0, 63, 140, 50, 0, 0, 50, 116, 0, 127, 101, 41, 245, 58, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 140, 50, 0, 0, 50, 116, 0, 127, 0, 52, 0, 58, 208, 179, 93, 191, 0, 0, 128, 191, 0, 0, 0, 191, 140, 50, 0, 0, 50, 116, 0, 127, 101, 41, 10, 57, 208, 179, 93, 191, 0, 0, 128, 191, 0, 0, 0, 191, 198, 50, 156, 0, 83, 96, 0, 127, 101, 41, 10, 57, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 198, 50, 156, 0, 83, 96, 0, 127, 0, 52, 0, 58, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 128, 191, 198, 50, 156, 0, 83, 96, 0, 127, 0, 52, 20, 56, 208, 179, 93, 191, 0, 0, 128, 191, 0, 0, 0, 63, 0, 129, 0, 0, 127, 0, 0, 129, 86, 56, 245, 58, 208, 179, 93, 191, 0, 0, 128, 191, 0, 0, 0, 191, 0, 129, 0, 0, 127, 0, 0, 129, 86, 56, 10, 57, 208, 179, 93, 63, 0, 0, 128, 191, 0, 0, 0, 191, 0, 129, 0, 0, 127, 0, 0, 129, 169, 59, 10, 57, 208, 179, 93, 191, 0, 0, 128, 191, 0, 0, 0, 191, 0, 129, 0, 0, 127, 0, 0, 129, 86, 56, 10, 57, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 128, 191, 0, 129, 0, 0, 127, 0, 0, 129, 0, 58, 20, 56, 208, 179, 93, 63, 0, 0, 128, 191, 0, 0, 0, 191, 0, 129, 0, 0, 127, 0, 0, 129, 169, 59, 10, 57, 208, 179, 93, 63, 0, 0, 128, 191, 0, 0, 0, 191, 0, 129, 0, 0, 127, 0, 0, 129, 169, 59, 10, 57, 208, 179, 93, 63, 0, 0, 128, 191, 0, 0, 0, 63, 0, 129, 0, 0, 127, 0, 0, 129, 169, 59, 245, 58, 49, 189, 187, 179, 0, 0, 128, 191, 0, 0, 128, 63, 0, 129, 0, 0, 127, 0, 0, 129, 0, 58, 235, 59, 49, 189, 187, 179, 0, 0, 128, 191, 0, 0, 128, 63, 0, 129, 0, 0, 127, 0, 0, 129, 0, 58, 235, 59, 208, 179, 93, 191, 0, 0, 128, 191, 0, 0, 0, 63, 0, 129, 0, 0, 127, 0, 0, 129, 86, 56, 245, 58, 208, 179, 93, 63, 0, 0, 128, 191, 0, 0, 0, 191, 0, 129, 0, 0, 127, 0, 0, 129, 169, 59, 10, 57 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 3, 0, 5, 0, 4, 0, 6, 0, 8, 0, 7, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 15, 0, 17, 0, 16, 0, 18, 0, 20, 0, 19, 0, 21, 0, 23, 0, 22, 0, 24, 0, 26, 0, 25, 0, 27, 0, 29, 0, 28, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 30,
"material": SubResource( 2 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 30
}
surfaces/1 = {
"aabb": AABB( -0.284073, -1.55661, -0.291378, 0.568146, 0.582765, 0.553901 ),
"array_data": PoolByteArray( 0, 0, 0, 0, 144, 78, 121, 191, 127, 47, 149, 190, 55, 0, 142, 0, 142, 0, 201, 127, 0, 60, 0, 0, 195, 70, 105, 62, 255, 62, 199, 191, 246, 7, 58, 190, 55, 0, 142, 0, 142, 0, 201, 127, 219, 58, 0, 56, 0, 0, 0, 0, 255, 62, 199, 191, 127, 47, 149, 190, 55, 0, 142, 0, 142, 0, 201, 127, 0, 60, 0, 56, 195, 70, 105, 62, 144, 78, 121, 191, 246, 7, 58, 190, 123, 0, 228, 0, 228, 0, 133, 127, 219, 58, 0, 0, 4, 114, 145, 62, 255, 62, 199, 191, 174, 201, 132, 61, 123, 0, 228, 0, 228, 0, 133, 127, 182, 57, 0, 56, 195, 70, 105, 62, 255, 62, 199, 191, 246, 7, 58, 190, 123, 0, 228, 0, 228, 0, 133, 127, 219, 58, 0, 56, 4, 114, 145, 62, 144, 78, 121, 191, 174, 201, 132, 61, 99, 0, 79, 0, 79, 0, 157, 127, 182, 57, 0, 0, 75, 117, 1, 62, 255, 62, 199, 191, 106, 105, 134, 62, 99, 0, 79, 0, 79, 0, 157, 127, 146, 56, 0, 56, 4, 114, 145, 62, 255, 62, 199, 191, 174, 201, 132, 61, 99, 0, 79, 0, 79, 0, 157, 127, 182, 57, 0, 56, 75, 117, 1, 62, 144, 78, 121, 191, 106, 105, 134, 62, 0, 0, 127, 0, 127, 0, 0, 127, 146, 56, 0, 0, 75, 117, 1, 190, 255, 62, 199, 191, 106, 105, 134, 62, 0, 0, 127, 0, 127, 0, 0, 127, 219, 54, 0, 56, 75, 117, 1, 62, 255, 62, 199, 191, 106, 105, 134, 62, 0, 0, 127, 0, 127, 0, 0, 127, 146, 56, 0, 56, 75, 117, 1, 190, 144, 78, 121, 191, 106, 105, 134, 62, 157, 0, 79, 0, 79, 0, 99, 127, 219, 54, 0, 0, 4, 114, 145, 190, 255, 62, 199, 191, 174, 201, 132, 61, 157, 0, 79, 0, 79, 0, 99, 127, 146, 52, 0, 56, 75, 117, 1, 190, 255, 62, 199, 191, 106, 105, 134, 62, 157, 0, 79, 0, 79, 0, 99, 127, 219, 54, 0, 56, 0, 0, 0, 0, 144, 78, 121, 191, 127, 47, 149, 190, 0, 127, 0, 0, 127, 0, 0, 127, 0, 52, 20, 56, 4, 114, 145, 190, 144, 78, 121, 191, 174, 201, 132, 61, 0, 127, 0, 0, 127, 0, 0, 127, 25, 36, 109, 58, 75, 117, 1, 62, 144, 78, 121, 191, 106, 105, 134, 62, 0, 127, 0, 0, 127, 0, 0, 127, 170, 53, 186, 59, 4, 114, 145, 190, 144, 78, 121, 191, 174, 201, 132, 61, 133, 0, 228, 0, 228, 0, 123, 127, 146, 52, 0, 0, 195, 70, 105, 190, 255, 62, 199, 191, 246, 7, 58, 190, 133, 0, 228, 0, 228, 0, 123, 127, 146, 48, 0, 56, 4, 114, 145, 190, 255, 62, 199, 191, 174, 201, 132, 61, 133, 0, 228, 0, 228, 0, 123, 127, 146, 52, 0, 56, 195, 70, 105, 190, 144, 78, 121, 191, 246, 7, 58, 190, 201, 0, 142, 0, 142, 0, 55, 127, 146, 48, 0, 0, 0, 0, 0, 0, 255, 62, 199, 191, 127, 47, 149, 190, 201, 0, 142, 0, 142, 0, 55, 127, 0, 0, 0, 56, 195, 70, 105, 190, 255, 62, 199, 191, 246, 7, 58, 190, 201, 0, 142, 0, 142, 0, 55, 127, 146, 48, 0, 56, 195, 70, 105, 62, 255, 62, 199, 191, 246, 7, 58, 190, 0, 129, 0, 0, 127, 0, 0, 129, 128, 59, 205, 56, 75, 117, 1, 62, 255, 62, 199, 191, 106, 105, 134, 62, 0, 129, 0, 0, 127, 0, 0, 129, 213, 58, 186, 59, 4, 114, 145, 190, 255, 62, 199, 191, 174, 201, 132, 61, 0, 129, 0, 0, 127, 0, 0, 129, 32, 56, 109, 58, 0, 0, 0, 0, 144, 78, 121, 191, 127, 47, 149, 190, 55, 0, 142, 0, 142, 0, 201, 127, 0, 60, 0, 0, 195, 70, 105, 62, 144, 78, 121, 191, 246, 7, 58, 190, 55, 0, 142, 0, 142, 0, 201, 127, 219, 58, 0, 0, 195, 70, 105, 62, 255, 62, 199, 191, 246, 7, 58, 190, 55, 0, 142, 0, 142, 0, 201, 127, 219, 58, 0, 56, 195, 70, 105, 62, 144, 78, 121, 191, 246, 7, 58, 190, 123, 0, 228, 0, 228, 0, 133, 127, 219, 58, 0, 0, 4, 114, 145, 62, 144, 78, 121, 191, 174, 201, 132, 61, 123, 0, 228, 0, 228, 0, 133, 127, 182, 57, 0, 0, 4, 114, 145, 62, 255, 62, 199, 191, 174, 201, 132, 61, 123, 0, 228, 0, 228, 0, 133, 127, 182, 57, 0, 56, 4, 114, 145, 62, 144, 78, 121, 191, 174, 201, 132, 61, 99, 0, 79, 0, 79, 0, 157, 127, 182, 57, 0, 0, 75, 117, 1, 62, 144, 78, 121, 191, 106, 105, 134, 62, 99, 0, 79, 0, 79, 0, 157, 127, 146, 56, 0, 0, 75, 117, 1, 62, 255, 62, 199, 191, 106, 105, 134, 62, 99, 0, 79, 0, 79, 0, 157, 127, 146, 56, 0, 56, 75, 117, 1, 190, 144, 78, 121, 191, 106, 105, 134, 62, 0, 0, 127, 0, 127, 0, 0, 127, 219, 54, 0, 0, 75, 117, 1, 190, 144, 78, 121, 191, 106, 105, 134, 62, 157, 0, 79, 0, 79, 0, 99, 127, 219, 54, 0, 0, 4, 114, 145, 190, 144, 78, 121, 191, 174, 201, 132, 61, 157, 0, 79, 0, 79, 0, 99, 127, 146, 52, 0, 0, 4, 114, 145, 190, 255, 62, 199, 191, 174, 201, 132, 61, 157, 0, 79, 0, 79, 0, 99, 127, 146, 52, 0, 56, 4, 114, 145, 62, 144, 78, 121, 191, 174, 201, 132, 61, 0, 127, 0, 0, 127, 0, 0, 127, 190, 55, 109, 58, 195, 70, 105, 62, 144, 78, 121, 191, 246, 7, 58, 190, 0, 127, 0, 0, 127, 0, 0, 127, 0, 55, 205, 56, 0, 0, 0, 0, 144, 78, 121, 191, 127, 47, 149, 190, 0, 127, 0, 0, 127, 0, 0, 127, 0, 52, 20, 56, 0, 0, 0, 0, 144, 78, 121, 191, 127, 47, 149, 190, 0, 127, 0, 0, 127, 0, 0, 127, 0, 52, 20, 56, 195, 70, 105, 190, 144, 78, 121, 191, 246, 7, 58, 190, 0, 127, 0, 0, 127, 0, 0, 127, 251, 43, 205, 56, 4, 114, 145, 190, 144, 78, 121, 191, 174, 201, 132, 61, 0, 127, 0, 0, 127, 0, 0, 127, 25, 36, 109, 58, 4, 114, 145, 190, 144, 78, 121, 191, 174, 201, 132, 61, 0, 127, 0, 0, 127, 0, 0, 127, 25, 36, 109, 58, 75, 117, 1, 190, 144, 78, 121, 191, 106, 105, 134, 62, 0, 127, 0, 0, 127, 0, 0, 127, 170, 48, 186, 59, 75, 117, 1, 62, 144, 78, 121, 191, 106, 105, 134, 62, 0, 127, 0, 0, 127, 0, 0, 127, 170, 53, 186, 59, 75, 117, 1, 62, 144, 78, 121, 191, 106, 105, 134, 62, 0, 127, 0, 0, 127, 0, 0, 127, 170, 53, 186, 59, 4, 114, 145, 62, 144, 78, 121, 191, 174, 201, 132, 61, 0, 127, 0, 0, 127, 0, 0, 127, 190, 55, 109, 58, 0, 0, 0, 0, 144, 78, 121, 191, 127, 47, 149, 190, 0, 127, 0, 0, 127, 0, 0, 127, 0, 52, 20, 56, 4, 114, 145, 190, 144, 78, 121, 191, 174, 201, 132, 61, 133, 0, 228, 0, 228, 0, 123, 127, 146, 52, 0, 0, 195, 70, 105, 190, 144, 78, 121, 191, 246, 7, 58, 190, 133, 0, 228, 0, 228, 0, 123, 127, 146, 48, 0, 0, 195, 70, 105, 190, 255, 62, 199, 191, 246, 7, 58, 190, 133, 0, 228, 0, 228, 0, 123, 127, 146, 48, 0, 56, 195, 70, 105, 190, 144, 78, 121, 191, 246, 7, 58, 190, 201, 0, 142, 0, 142, 0, 55, 127, 146, 48, 0, 0, 0, 0, 0, 0, 144, 78, 121, 191, 127, 47, 149, 190, 201, 0, 142, 0, 142, 0, 55, 127, 0, 0, 0, 0, 0, 0, 0, 0, 255, 62, 199, 191, 127, 47, 149, 190, 201, 0, 142, 0, 142, 0, 55, 127, 0, 0, 0, 56, 195, 70, 105, 190, 255, 62, 199, 191, 246, 7, 58, 190, 0, 129, 0, 0, 127, 0, 0, 129, 127, 56, 205, 56, 0, 0, 0, 0, 255, 62, 199, 191, 127, 47, 149, 190, 0, 129, 0, 0, 127, 0, 0, 129, 0, 58, 20, 56, 4, 114, 145, 62, 255, 62, 199, 191, 174, 201, 132, 61, 0, 129, 0, 0, 127, 0, 0, 129, 223, 59, 109, 58, 75, 117, 1, 190, 255, 62, 199, 191, 106, 105, 134, 62, 0, 129, 0, 0, 127, 0, 0, 129, 42, 57, 186, 59 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 3, 0, 5, 0, 4, 0, 6, 0, 8, 0, 7, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 15, 0, 17, 0, 16, 0, 18, 0, 20, 0, 19, 0, 21, 0, 23, 0, 22, 0, 24, 0, 26, 0, 25, 0, 27, 0, 29, 0, 28, 0, 30, 0, 32, 0, 31, 0, 33, 0, 35, 0, 34, 0, 9, 0, 10, 0, 36, 0, 37, 0, 39, 0, 38, 0, 40, 0, 42, 0, 41, 0, 43, 0, 45, 0, 44, 0, 46, 0, 48, 0, 47, 0, 49, 0, 51, 0, 50, 0, 52, 0, 54, 0, 53, 0, 55, 0, 57, 0, 56, 0, 58, 0, 26, 0, 59, 0, 59, 0, 26, 0, 24, 0, 24, 0, 25, 0, 60, 0, 25, 0, 26, 0, 61, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 72,
"material": SubResource( 4 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 62
}

[sub_resource type="CapsuleShape" id=6]
radius = 0.154871
height = 0.158571

[node name="Tree1" type="StaticBody"]

[node name="Cone" type="MeshInstance" parent="."]
transform = Transform( 0.2, 0, 0, 0, 0.2, 0, 0, 0, 0.2, 0, 0.2836, 0 )
mesh = SubResource( 5 )
material/0 = null
material/1 = null

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-008, -1, 0, 1, -4.37114e-008, 0, 0.201491, 0 )
shape = SubResource( 6 )
